import paramUtils
import metricsJsonUtils
import argparse

# Parse inputs
parser = argparse.ArgumentParser(
    description='Read output values from result files for Dakota')

parser.add_argument("kpiFile",
                    help="The address of a json file used for specifying the output "
                         "metrics and images for Metrics Extraction (MEX) Python library")

parser.add_argument("DakotaOutputFile",
                    help="The address of a file used for writing the output parameters "
                         "for Dakota")

parser.add_argument('--MEXCsvPathTemplate', default='',
                    help='The path of csv files generated by MEX. The case number in the '
                         'path should be replaced by {:d}. For example,  '
                         '"outputs/case{:03d}/metrics.csv" indicates that the MEX csv '
                         'files are: outputs/case000/metrics.csv, '
                         'outputs/case001/metrics.csv, ... '
                         '(default:"", which only works if no output is required from'
                         ' the MEX csv files)')

args = parser.parse_args()
kpiFile = args.kpiFile
outFile = args.DakotaOutputFile
metricsFileNameTemplate = args.MEXCsvPathTemplate

# Read the kpihash and set the default values for missing fields
[kpihash, orderPreservedKeys] = metricsJsonUtils.readKPIJsonFile(kpiFile)
for kpi in kpihash:
    kpihash[kpi] = metricsJsonUtils.setKPIFieldDefaults(kpihash[kpi], kpi)

# Only read output parameters with "sense" key in the kpihash
ignoreSet = []
for kpi in orderPreservedKeys:
    if kpihash[kpi]['sense'] is None:
        ignoreSet.append(kpi)
outParamTable = paramUtils.getOutputParamsFromKPI(kpihash, orderPreservedKeys, ignoreSet)

# Read the desired metric from each output file and add them to caselist
caseNumber = 0    # Only one case is run by call of workflow through Dakota
outParams = paramUtils.readOutParamsForCase(outParamTable, metricsFileNameTemplate,
                                            caseNumber, kpihash)

f = open(outFile, 'w')
f.write("\n".join(outParams))
f.write("\n")
f.close()
